{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/local/SENG-LIVE-112221-phase-2/lectures/10-advanced-hooks/use-ref/src/components/Ticker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { makeRandomNumber } from \"../utils\";\n\nfunction Ticker() {\n  _s();\n\n  const [price, setPrice] = useState(0);\n  const [color, setColor] = useState(\"black\");\n  useEffect(() => {\n    // use the current value of the ref\n    const prevPrice = prevPriceRef.current; // console.log(prevPrice);\n    // console.log(price);\n\n    if (price > prevPrice) {\n      setColor(\"green\");\n    } else if (price < prevPrice) {\n      setColor(\"red\");\n    } else {\n      setColor(\"black\");\n    } // set the new value of the ref (note: this doesn't trigger a re-render)\n\n\n    prevPriceRef.current = price;\n  }, [price]);\n  useEffect(() => {\n    // every 1 second, generate a new random price\n    const id = setInterval(() => setPrice(makeRandomNumber), 1000);\n    return function () {\n      clearInterval(id);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TickerMaster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: color\n      },\n      children: [\"Price: $\", price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ticker, \"t+magCCi9Z7o+HpnJMz5Hu3kM/w=\");\n\n_c = Ticker;\nexport default Ticker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ticker\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/local/SENG-LIVE-112221-phase-2/lectures/10-advanced-hooks/use-ref/src/components/Ticker.js"],"names":["React","useEffect","useState","makeRandomNumber","Ticker","price","setPrice","color","setColor","prevPrice","prevPriceRef","current","id","setInterval","clearInterval"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,UAAjC;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,OAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,SAAS,GAAGC,YAAY,CAACC,OAA/B,CAFc,CAId;AACA;;AAEA,QAAIN,KAAK,GAAGI,SAAZ,EAAuB;AACrBD,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD,MAEO,IAAIH,KAAK,GAAGI,SAAZ,EAAuB;AAC5BD,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAFM,MAEA;AACLA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAba,CAcd;;;AACAE,IAAAA,YAAY,CAACC,OAAb,GAAuBN,KAAvB;AACD,GAhBQ,EAgBN,CAACA,KAAD,CAhBM,CAAT;AAkBAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMW,EAAE,GAAGC,WAAW,CAAC,MAAMP,QAAQ,CAACH,gBAAD,CAAf,EAAmC,IAAnC,CAAtB;AACA,WAAO,YAAY;AACjBW,MAAAA,aAAa,CAACF,EAAD,CAAb;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,KAAK,EAAE;AAAEL,QAAAA,KAAK,EAAEA;AAAT,OAAX;AAAA,6BAAsCF,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApCQD,M;;KAAAA,M;AAsCT,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { makeRandomNumber } from \"../utils\";\n\nfunction Ticker() {\n  const [price, setPrice] = useState(0);\n  const [color, setColor] = useState(\"black\");\n\n  useEffect(() => {\n    // use the current value of the ref\n    const prevPrice = prevPriceRef.current;\n    \n    // console.log(prevPrice);\n    // console.log(price);\n    \n    if (price > prevPrice) {\n      setColor(\"green\");\n    } else if (price < prevPrice) {\n      setColor(\"red\");\n    } else {\n      setColor(\"black\");\n    }\n    // set the new value of the ref (note: this doesn't trigger a re-render)\n    prevPriceRef.current = price;\n  }, [price]);\n\n  useEffect(() => {\n    // every 1 second, generate a new random price\n    const id = setInterval(() => setPrice(makeRandomNumber), 1000);\n    return function () {\n      clearInterval(id);\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>TickerMaster</h1>\n      <h2 style={{ color: color }}>Price: ${price}</h2>\n    </div>\n  );\n}\n\nexport default Ticker;\n"]},"metadata":{},"sourceType":"module"}